{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","data","cityInput","weather","callBackendAPI","a","fetch","response","json","body","status","Error","message","cityInputOnChangeHandler","e","setState","target","value","submitButtonHandler","console","log","hourly","this","then","res","express","catch","err","dataMap","map","dateTimeString","Date","time","toLocaleTimeString","className","summary","icon","precipProbability","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,gMCsE5BC,G,mOA7DbC,MAAQ,CACNC,KAAM,KACNC,UAAW,GACXC,QAAS,I,EAUXC,e,qBAAiB,8BAAAC,EAAA,qEACQC,MAAM,oBADd,cACTC,EADS,gBAEIA,EAASC,OAFb,UAETC,EAFS,OAIS,MAApBF,EAASG,OAJE,sBAKPC,MAAMF,EAAKG,SALJ,gCAORH,GAPQ,yC,EASjBI,yBAA2B,SAAAC,GACzB,EAAKC,SAAS,CAAEb,UAAWY,EAAEE,OAAOC,S,EAEtCC,oB,qBAAsB,8BAAAb,EAAA,qEACGC,MAAM,oCAAD,OACU,EAAKN,MAAME,YAF7B,cACdK,EADc,gBAIDA,EAASC,OAJR,OAIdC,EAJc,OAQpBU,QAAQC,IAAIX,EAAKY,OAAOpB,MACxB,EAAKc,SAAS,CAAEZ,QAASM,EAAKY,OAAOpB,OATjB,yC,mFAnBD,IAAD,OAElBqB,KAAKlB,iBACFmB,KAAK,SAAAC,GAAG,OAAI,EAAKT,SAAS,CAAEd,KAAMuB,EAAIC,YACtCC,MAAM,SAAAC,GAAG,OAAIR,QAAQC,IAAIO,O,+BA4B5B,IAAMC,EAAUN,KAAKtB,MAAMG,QAAQ0B,IAAI,SAAAZ,GACrC,IAAMa,EAAiB,IAAIC,KAAkB,IAAbd,EAAMe,MAAaC,qBACnD,OACE,yBAAKC,UAAU,eACb,4BAAKJ,GACL,6BACA,4BAAKb,EAAMkB,SACX,6BACgB,WAAflB,EAAMmB,KAAoB,uBAAGF,UAAU,iBAAoB,KAC5D,+CAAgD,IAA1BjB,EAAMoB,kBAA2B,QAI7D,OACE,yBAAKH,UAAU,OACb,2BAAOI,SAAUhB,KAAKT,2BACtB,4BAAQ0B,QAASjB,KAAKJ,qBAAtB,mBACA,yBAAKgB,UAAU,kBAAkBN,Q,GAxDvBY,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC,iB","file":"static/js/main.409839a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n// import \"./weather-icons-wind.min.css\";\n// import \"./weather-icons.min.css\";\nimport \"./weatherIcons/weather-icons-wind.css\";\nimport \"./weatherIcons/weather-icons.css\";\n\nclass App extends Component {\n  state = {\n    data: null,\n    cityInput: \"\",\n    weather: []\n  };\n\n  componentDidMount() {\n    // Call our fetch function below once the component mounts\n    this.callBackendAPI()\n      .then(res => this.setState({ data: res.express }))\n      .catch(err => console.log(err));\n  }\n  // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n  callBackendAPI = async () => {\n    const response = await fetch(\"/express_backend\");\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message);\n    }\n    return body;\n  };\n  cityInputOnChangeHandler = e => {\n    this.setState({ cityInput: e.target.value });\n  };\n  submitButtonHandler = async () => {\n    const response = await fetch(\n      `http://localhost:5000/weatherAPI/${this.state.cityInput}`\n    );\n    const body = await response.json();\n    // if (response.status !== 200) {\n    //   throw Error(body.message)\n    // }\n    console.log(body.hourly.data);\n    this.setState({ weather: body.hourly.data });\n  };\n\n  render() {\n    const dataMap = this.state.weather.map(value => {\n      const dateTimeString = new Date(value.time * 1000).toLocaleTimeString()\n      return (\n        <div className=\"weatherCard\">\n          <h1>{dateTimeString}</h1>\n          <br />\n          <h2>{value.summary}</h2>\n          <br />\n          {value.icon === 'cloudy' ? <i className=\"wi wi-cloudy\" /> : null}\n          <h3>Chance of rain: {(value.precipProbability * 100) + '%'}</h3>\n        </div>\n      );\n    });\n    return (\n      <div className=\"App\">\n        <input onChange={this.cityInputOnChangeHandler} />\n        <button onClick={this.submitButtonHandler}>Request Weather</button>\n        <div className=\"weatherInfoDiv\">{dataMap}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}